@using Microsoft.JSInterop
@model IEnumerable<CadViewModel>
@{
    ViewData["Title"] = $"{User.Identity!.Name}'s 3D Models";
}
<head>
    <script type="importmap">
        {
          "imports": {
              "three": "https://unpkg.com/three@v0.161.0/build/three.module.js",
              "three/addons/": "https://unpkg.com/three@v0.161.0/examples/jsm/"
          }
        }
    </script>
</head>
<body>
    <h2 class="text-center">@ViewData["Title"]</h2>
    <hr />

    <div class="d-flex justify-content-center mb-2">
        <a class="btn btn-primary" asp-area="" asp-controller="Cad" asp-action="Add">Submit a 3D Model</a>
    </div>


    @if (!Model.Any())
    {
        <p class="text-center">No orders yet!</p>
    }
    else
    {
        <div class="mt-4">
            <div class="row">
                @foreach (CadViewModel cad in Model)
                {
                    <div class="col-3 mt-4">
                        <div class="card">
                            <h4 class="card-header text-center mb-1">@cad.Name (@cad.Category)</h4>
                            <div class="card-body">
                                <div id="model-@cad.Id">
                                    <script type="module">
                                        import * as THREE from 'three';
                                        import { STLLoader } from 'three/addons/loaders/STLLoader.js';
                                        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

                                        function loadModel(cadId, cadName, constant, x, y, z, spin, axis) {

                                            // Scene
                                            const scene = new THREE.Scene();
                                            scene.background = null;

                                            // Camera
                                            const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
                                            camera.position.set(x, y, z);
                                            camera.lookAt(0, 0, 0);

                                            // Renderer
                                            const renderer = new THREE.WebGLRenderer();
                                            renderer.setSize(window.innerWidth / constant, window.innerHeight / constant);
                                            renderer.setClearColor(0x000000, 0);
                                            document.getElementById(`model-${cadId}`).appendChild(renderer.domElement);

                                            // Lights
                                            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                                            directionalLight.position.set(0, 1, 0);
                                            scene.add(directionalLight);

                                            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                                            scene.add(ambientLight);

                                            // STL Loader
                                            const loader = new STLLoader();
                                            loader.load(`/others/cads/${cadName}${cadId}.stl`, function (stl) {
                                                const material = new THREE.MeshLambertMaterial();
                                                const mesh = new THREE.Mesh(stl, material);
                                                scene.add(mesh);
                                                stl.center();
                                            }, undefined, function (error) {

                                                console.error(error);

                                            });

                                            // Animation
                                            const controls = new OrbitControls(camera, renderer.domElement);
                                            controls.enableDamping = true;
                                            controls.dampingFactor = 0.25;

                                            let isInteracting = false;
                                            let resumeTimeout;

                                            controls.addEventListener('change', function (event) {
                                                isInteracting = true;
                                                clearTimeout(resumeTimeout);

                                                resumeTimeout = setTimeout(() => {
                                                    isInteracting = false;
                                                }, 3000);
                                            });

                                            function animate() {
                                                requestAnimationFrame(animate);
                                                renderer.render(scene, camera);
                                                controls.update();

                                                if (!isInteracting) {
                                                    scene.traverse(function (object) {
                                                        if (object instanceof THREE.Mesh && axis != ' ' && spin > 0) {
                                                            switch (axis) {
                                                                case 'x': object.rotation.x += spin; break;
                                                                case 'y': object.rotation.y += spin; break;
                                                                case 'z': object.rotation.z += spin; break;
                                                            }
                                                        }
                                                    });
                                                }
                                            }
                                            animate();

                                            window.addEventListener('resize', function () {
                                                const width = window.innerWidth / constant;
                                                const height = window.innerHeight / constant;
                                                renderer.setSize(width, height);
                                                camera.aspect = width / height;
                                                camera.updateProjectionMatrix();
                                            });
                                        }
                                        
                                        let x = @cad.Coords.Item1, y = @cad.Coords.Item2, z = @cad.Coords.Item3;
                                        loadModel(@cad.Id, '@cad.Name', 6, x, y, z, @cad.SpinFactor, '@(cad.SpinAxis ?? ' ')');
                                    </script>
                                </div>
                                <div class="d-grid gap-2">
                                    <a asp-area="" asp-controller="Cad" asp-action="Edit" asp-route-id="@cad.Id" class="btn btn-primary btn-warning mt-3">Edit Details</a>
                                    <form method="post" class="mt-2" asp-area="" asp-controller="Cad" asp-action="Delete" asp-route-id="@cad.Id">
                                        <div class="d-grid gap-2">
                                            <input type="submit" value="Delete" class="btn btn-danger mb-2"
                                                   onclick="return confirm('Are you sure you want to delete this order: @cad.Name?')" />
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <div class="card-footer text-end fs-6">@cad.CreationDate</div>
                        </div>
                    </div>

                }
            </div>
        </div>
    }
</body>