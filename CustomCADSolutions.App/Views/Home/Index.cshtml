@model CadViewModel
@{
}

<html>
<head>
    <script type="importmap">
        {
          "imports": {
              "three": "https://unpkg.com/three@v0.161.0/build/three.module.js",
              "three/addons/": "https://unpkg.com/three@v0.161.0/examples/jsm/"
          }
        }
    </script>
    <!--Animation-->
    <link rel="stylesheet" href="~/css/index.css" />
</head>

<body>
    <h2 class="fade-in text-center mt-4 mb-4">CustomCADSolutions</h2>
    <hr />
    <div style="height: 350px;" class="container d-flex fade-in">
        <div class="fade-in d-flex flex-column justify-content-center w-100">
            <h4 class="fade-in mb-4 text-center">Where Your Imagination Comes to Life!</h4>
            <p class="fade-in">
                In a world sculpted by pixels and imagination,
                each 3D model is a bridge between dream and reality,
                transforming visions into virtual 3D masterpieces!
            </p>
        </div>
        <article class="fade-in w-100 h-auto">
            <div id="model" style="background-color: transparent;" class="fade-in"></div>
            <script type="module">
                import * as THREE from 'three';
                import { STLLoader } from 'three/addons/loaders/STLLoader.js';
                import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

                function loadModel(cadId, cadName, widthConstant, heightConstant, x, y, z) {

                    // Scene
                    const scene = new THREE.Scene();
                    scene.background = null;

                    // Camera
                    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
                    camera.position.set(x, y, z);
                    camera.lookAt(0, 0, 0);

                    // Renderer
                    const renderer = new THREE.WebGLRenderer({ alpha: true, preserveDrawingBuffer: true });
                    renderer.setSize(window.innerWidth / widthConstant, window.innerHeight / heightConstant);
                    renderer.setClearColor(0x000000, 0);
                    document.getElementById(`model`).appendChild(renderer.domElement);

                    // Lights
                    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                    directionalLight.position.set(0, 1, 0);
                    scene.add(directionalLight);

                    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                    scene.add(ambientLight);

                    // STL Loader
                    const loader = new STLLoader();
                    loader.load(`/others/cads/${cadName}${cadId}.stl`, function (stl) {
                        const material = new THREE.MeshLambertMaterial();
                        const mesh = new THREE.Mesh(stl, material);
                        scene.add(mesh);
                        stl.center();
                    }, undefined, function (error) {

                        console.error(error);

                    });

                    // Animation
                    const controls = new OrbitControls(camera, renderer.domElement);
                    controls.enableDamping = true;
                    controls.dampingFactor = 0.25;

                    let isInteracting = false;
                    let resumeTimeout;

                    controls.addEventListener('change', function (event) {
                        isInteracting = true;
                        clearTimeout(resumeTimeout);

                        resumeTimeout = setTimeout(() => {
                            isInteracting = false;
                        }, 1500);
                    });

                    function animate() {
                        requestAnimationFrame(animate);
                        renderer.render(scene, camera);
                        controls.update();

                        if (!isInteracting) {
                            scene.traverse(function (object) {
                                if (object instanceof THREE.Mesh) {
                                    object.rotation.y += 0.025;
                                }
                            });
                        }
                    }
                    animate();

                    window.addEventListener('resize', function () {
                        const width = window.innerWidth / constant;
                        const height = window.innerHeight / constant;
                        renderer.setSize(width, height);
                        camera.aspect = width / height;
                        camera.updateProjectionMatrix();
                    });
                }

                let x = @Model.Coords.Item1, y = @Model.Coords.Item2, z = @Model.Coords.Item3;
                loadModel(@Model.Id, '@Model.Name', 3, 2, x, y, z);
            </script>
        </article>
    </div>
</body>
</html>